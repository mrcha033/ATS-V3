name: Unified CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job for cross-platform build and test (from ci.yml)
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libssl-dev libcurl4-openssl-dev libboost-all-dev
        pip install conan

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        pip install conan

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake boost openssl curl
        pip install conan

    - name: Setup Conan
      run: |
        conan profile detect --force
        conan install . --build=missing

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --parallel

    - name: Test
      run: |
        cd build
        ctest --output-on-failure --parallel

  # Job for code quality checks (from ci.yml)
  code-quality:
    runs-on: ubuntu-latest
    needs: build-and-test # Ensure build and test passes before running quality checks
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 src/ 2> cppcheck-result.xml || true

    - name: Run clang-tidy
      # Assuming clang-tidy needs a compile_commands.json, which CMake generates
      # This might need adjustment based on project's specific clang-tidy setup
      run: |
        # First, ensure compile_commands.json is generated by a build step
        # For simplicity, assuming it's generated in the root build directory
        # If not, adjust path or add a build step here to generate it.
        # For now, just run it on a sample file or directory if compile_commands.json is not readily available
        # A more robust solution would involve running cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        # and then using run-clang-tidy.py or similar.
        find . -name "*.cpp" -o -name "*.hpp" | xargs clang-tidy -p build -extra-arg=-std=c++17 || true

    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-results
        path: cppcheck-result.xml

  # Job for building multi-service Docker images (from ci-cd.yml)
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality] # Depends on both build/test and code quality
    if: github.event_name == 'push' # Only build and push Docker images on push events
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [ats-core, price-collector, trading-engine, risk-manager, backtest-analytics, ui-dashboard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker-images # Depends on Docker images being built
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging
      run: |
        chmod +x ./deployment/scripts/deploy.sh
        ./deployment/scripts/deploy.sh staging ${{ github.sha }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker-images # Depends on Docker images being built
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production (Blue-Green)
      run: |
        chmod +x ./deployment/scripts/blue-green-deploy.sh
        ./deployment/scripts/blue-green-deploy.sh production ${{ github.ref_name }}
        
    - name: Health Check
      run: |
        chmod +x ./deployment/scripts/health-check.sh
        ./deployment/scripts/health-check.sh production
        
    - name: Rollback on Failure
      if: failure()
      run: |
        chmod +x ./deployment/scripts/rollback.sh
        ./deployment/scripts/rollback.sh production